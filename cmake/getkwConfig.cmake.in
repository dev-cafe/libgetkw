# getkwConfig.cmake
# ---------------------
#
# getkw cmake module.
# This module sets the following variables in your project:
#
# ::
#
#   getkw_FOUND - true if getkw and all required components found on the system
#   getkw_VERSION - getkw version in format Major.Minor.Release
#   getkw_INCLUDE_DIRS - Directory where the getkw headers are located.
#   getkw_INCLUDE_DIR - same as DIRS
#   getkw_DEFINITIONS: Definitions necessary to use getkw, namely USING_getkw.
#   getkw_LIBRARIES - getkw library to link against.
#   getkw_LIBRARY - same as LIBRARIES
#   getkw_EXECUTABLE - path to getkw executable
#   getkw_PYMOD - path to getkw python modules
#
#
# Exported targets:
#
# ::
#
# If getkw is found, this module defines the following :prop_tgt:`IMPORTED`
# target. ::
#
#   getkw::getkw - the main getkw library with header & defs attached.
#
#
# Suggested usage:
#
# ::
#
#   find_package(getkw)
#   find_package(getkw 1.1.7 CONFIG REQUIRED)
#
#
# The following variables can be set to guide the search for this package:
#
# ::
#
#   getkw_DIR - CMake variable, set to directory containing this Config file
#   CMAKE_PREFIX_PATH - CMake variable, set to root directory of this package
#   PATH - environment variable, set to bin directory of this package
#   CMAKE_DISABLE_FIND_PACKAGE_getkw - CMake variable, disables
#       find_package(getkw) perhaps to force internal build

@PACKAGE_INIT@

set(PN getkw)

# find includes
unset(_temp_h CACHE)
find_path(_temp_h
  NAMES getkw/Getkw.hpp
  PATHS ${PACKAGE_PREFIX_DIR}/@INSTALL_INCLUDEDIR@
  NO_DEFAULT_PATH
  )
if(_temp_h)
  set(${PN}_INCLUDE_DIR "${_temp_h}")
  set(${PN}_INCLUDE_DIRS ${${PN}_INCLUDE_DIR})
else()
  set(${PN}_FOUND 0)
  if(NOT CMAKE_REQUIRED_QUIET)
    message(STATUS "${PN}Config missing component: header (${PN}: ${_temp_h})")
  endif()
endif()

# find library: shared, static, or whichever
unset(_temp CACHE)
find_library(_temp
  NAMES getkw
  PATHS ${PACKAGE_PREFIX_DIR}/@INSTALL_LIBDIR@
  NO_DEFAULT_PATH
  )
if(_temp)
  set(${PN}_LIBRARY "${_temp}")
else()
  set(${PN}_FOUND 0)
  if(NOT CMAKE_REQUIRED_QUIET)
    message(STATUS "${PN}Config missing component: library (${PN}: ${_temp})")
  endif()
endif()
set(${PN}_LIBRARIES ${${PN}_LIBRARY})
set(${PN}_DEFINITIONS USING_${PN})
set(${PN}_PYMOD ${PACKAGE_PREFIX_DIR}/@INSTALL_PYMODDIR@)

check_required_components(${PN})

#-----------------------------------------------------------------------------
# Don't include targets if this file is being picked up by another
# project which has already built this as a subproject
#-----------------------------------------------------------------------------
if(NOT TARGET ${PN}::getkw)
  include("${CMAKE_CURRENT_LIST_DIR}/${PN}Targets.cmake")
  include(CMakeFindDependencyMacro)
  if(NOT TARGET Boost::boost)
    find_dependency(Boost)
  endif()
endif()
